#![allow(dead_code)]
#![allow(non_snake_case)]
#![allow(non_camel_case_types)]

/* automatically generated by rust-bindgen */

pub const DEVICENAME_STRING: &'static [u8; 5usize] = b"vJoy\0";
pub const NTDEVICE_NAME_STRING: &'static [u8; 13usize] = b"\\Device\\vJoy\0";
pub const SYMBOLIC_NAME_STRING: &'static [u8; 17usize] = b"\\DosDevices\\vJoy\0";
pub const DOS_FILE_NAME: &'static [u8; 9usize] = b"\\\\.\\vJoy\0";
pub const VJOY_INTERFACE: &'static [u8; 8usize] = b"Device_\0";
pub const VER_X_: u32 = 0;
pub const VER_H_: u32 = 2;
pub const VER_M_: u32 = 1;
pub const VER_L_: u32 = 8;
pub const VENDOR_N_ID: u32 = 4660;
pub const PRODUCT_N_ID: u32 = 48813;
pub const VERSION_N: u32 = 536;
pub const VENDOR_STR_ID: &'static [u8; 17usize] = b"Shaul Eizikovich\0";
pub const PRODUCT_STR_ID: &'static [u8; 24usize] = b"vJoy - Virtual Joystick\0";
pub const F_LOAD_POSITIONS: u32 = 2320;
pub const F_GETATTRIB: u32 = 2321;
pub const F_GET_FFB_DATA: u32 = 2322;
pub const F_SET_FFB_STAT: u32 = 2323;
pub const F_GET_FFB_STAT: u32 = 2326;
pub const F_GET_DEV_INFO: u32 = 2327;
pub const F_IS_DRV_FFB_CAP: u32 = 2328;
pub const F_IS_DRV_FFB_EN: u32 = 2329;
pub const F_GET_DRV_DEV_MAX: u32 = 2330;
pub const F_GET_DRV_DEV_EN: u32 = 2331;
pub const F_IS_DEV_FFB_START: u32 = 2332;
pub const F_GET_DEV_STAT: u32 = 2333;
pub const F_GET_DRV_INFO: u32 = 2334;
pub const F_RESET_DEV: u32 = 2335;
pub const F_GET_POSITIONS: u32 = 2336;
pub const IOCTL_HID_SET_FEATURE: u32 = 721297;
pub const IOCTL_HID_WRITE_REPORT: u32 = 720911;
pub const MAX_N_DEVICES: u32 = 16;
pub const HID_USAGE_X: u32 = 48;
pub const HID_USAGE_Y: u32 = 49;
pub const HID_USAGE_Z: u32 = 50;
pub const HID_USAGE_RX: u32 = 51;
pub const HID_USAGE_RY: u32 = 52;
pub const HID_USAGE_RZ: u32 = 53;
pub const HID_USAGE_SL0: u32 = 54;
pub const HID_USAGE_SL1: u32 = 55;
pub const HID_USAGE_WHL: u32 = 56;
pub const HID_USAGE_POV: u32 = 57;
pub const HID_USAGE_CONST: u32 = 38;
pub const HID_USAGE_RAMP: u32 = 39;
pub const HID_USAGE_SQUR: u32 = 48;
pub const HID_USAGE_SINE: u32 = 49;
pub const HID_USAGE_TRNG: u32 = 50;
pub const HID_USAGE_STUP: u32 = 51;
pub const HID_USAGE_STDN: u32 = 52;
pub const HID_USAGE_SPRNG: u32 = 64;
pub const HID_USAGE_DMPR: u32 = 65;
pub const HID_USAGE_INRT: u32 = 66;
pub const HID_USAGE_FRIC: u32 = 67;
pub const HID_ID_STATE: u32 = 2;
pub const HID_ID_EFFREP: u32 = 1;
pub const HID_ID_ENVREP: u32 = 2;
pub const HID_ID_CONDREP: u32 = 3;
pub const HID_ID_PRIDREP: u32 = 4;
pub const HID_ID_CONSTREP: u32 = 5;
pub const HID_ID_RAMPREP: u32 = 6;
pub const HID_ID_CSTMREP: u32 = 7;
pub const HID_ID_SMPLREP: u32 = 8;
pub const HID_ID_EFOPREP: u32 = 10;
pub const HID_ID_BLKFRREP: u32 = 11;
pub const HID_ID_CTRLREP: u32 = 12;
pub const HID_ID_GAINREP: u32 = 13;
pub const HID_ID_SETCREP: u32 = 14;
pub const HID_ID_NEWEFREP: u32 = 1;
pub const HID_ID_BLKLDREP: u32 = 2;
pub const HID_ID_POOLREP: u32 = 3;
pub const NO_HANDLE_BY_INDEX: i32 = -1;
pub const BAD_PREPARSED_DATA: i32 = -2;
pub const NO_CAPS: i32 = -3;
pub const BAD_N_BTN_CAPS: i32 = -4;
pub const BAD_CALLOC: i32 = -5;
pub const BAD_BTN_CAPS: i32 = -6;
pub const BAD_BTN_RANGE: i32 = -7;
pub const BAD_N_VAL_CAPS: i32 = -8;
pub const BAD_ID_RANGE: i32 = -9;
pub const NO_SUCH_AXIS: i32 = -10;
pub const BAD_DEV_STAT: i32 = -11;
pub const NO_DEV_EXIST: i32 = -12;
pub const NO_FILE_EXIST: i32 = -13;
pub const REG_PARAM: &'static [u8; 50usize] =
    b"SYSTEM\\CurrentControlSet\\services\\vjoy\\Parameters\0";
pub const REG_PARAM_DEV0: &'static [u8; 58usize] =
    b"SYSTEM\\CurrentControlSet\\services\\vjoy\\Parameters\\Device0\0";
pub const REG_PARAM_DEV: &'static [u8; 57usize] =
    b"SYSTEM\\CurrentControlSet\\services\\vjoy\\Parameters\\Device\0";
pub const REG_DEVICE: &'static [u8; 7usize] = b"Device\0";
pub const REG_INIT: &'static [u8; 5usize] = b"Init\0";
pub const BTN_INIT: &'static [u8; 5usize] = b"BTNS\0";
pub const INTERFACE_LOG_LEVEL: &'static [u8; 22usize] = b"VJOYINTERFACELOGLEVEL\0";
pub const INTERFACE_LOG_FILE: &'static [u8; 21usize] = b"VJOYINTERFACELOGFILE\0";
pub const INTERFACE_DEF_LOG_FILE: &'static [u8; 18usize] = b"vJoyInterface.log\0";
pub type BOOL = ::std::os::raw::c_int;
pub type BYTE = ::std::os::raw::c_uchar;
pub type CHAR = ::std::os::raw::c_char;
pub type DWORD = ::std::os::raw::c_ulong;
pub type FLOAT = f32;
pub type INT = ::std::os::raw::c_int;
pub type LONG = ::std::os::raw::c_long;
pub type ULONG = ::std::os::raw::c_ulong;
pub type USHORT = ::std::os::raw::c_ushort;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _HID_DEVICE_ATTRIBUTES {
    pub Size: ULONG,
    pub VendorID: USHORT,
    pub ProductID: USHORT,
    pub VersionNumber: USHORT,
    pub Reserved: [USHORT; 11usize],
}
#[test]
fn bindgen_test_layout__HID_DEVICE_ATTRIBUTES() {
    assert_eq!(
        ::std::mem::size_of::<_HID_DEVICE_ATTRIBUTES>(),
        32usize,
        concat!("Size of: ", stringify!(_HID_DEVICE_ATTRIBUTES))
    );
    assert_eq!(
        ::std::mem::align_of::<_HID_DEVICE_ATTRIBUTES>(),
        4usize,
        concat!("Alignment of ", stringify!(_HID_DEVICE_ATTRIBUTES))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_HID_DEVICE_ATTRIBUTES>())).Size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_HID_DEVICE_ATTRIBUTES),
            "::",
            stringify!(Size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_HID_DEVICE_ATTRIBUTES>())).VendorID as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_HID_DEVICE_ATTRIBUTES),
            "::",
            stringify!(VendorID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_HID_DEVICE_ATTRIBUTES>())).ProductID as *const _ as usize
        },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(_HID_DEVICE_ATTRIBUTES),
            "::",
            stringify!(ProductID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_HID_DEVICE_ATTRIBUTES>())).VersionNumber as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_HID_DEVICE_ATTRIBUTES),
            "::",
            stringify!(VersionNumber)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_HID_DEVICE_ATTRIBUTES>())).Reserved as *const _ as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(_HID_DEVICE_ATTRIBUTES),
            "::",
            stringify!(Reserved)
        )
    );
}
pub type HID_DEVICE_ATTRIBUTES = _HID_DEVICE_ATTRIBUTES;
pub type PHID_DEVICE_ATTRIBUTES = *mut _HID_DEVICE_ATTRIBUTES;
pub const ERRLEVEL_INFO: ERRLEVEL = 0;
pub const ERRLEVEL_WARN: ERRLEVEL = 1;
pub const ERRLEVEL_ERR: ERRLEVEL = 2;
pub const ERRLEVEL_FATAL: ERRLEVEL = 3;
pub const ERRLEVEL_APP: ERRLEVEL = 4;
pub type ERRLEVEL = i32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _JOYSTICK_POSITION {
    pub bDevice: BYTE,
    pub wThrottle: LONG,
    pub wRudder: LONG,
    pub wAileron: LONG,
    pub wAxisX: LONG,
    pub wAxisY: LONG,
    pub wAxisZ: LONG,
    pub wAxisXRot: LONG,
    pub wAxisYRot: LONG,
    pub wAxisZRot: LONG,
    pub wSlider: LONG,
    pub wDial: LONG,
    pub wWheel: LONG,
    pub wAxisVX: LONG,
    pub wAxisVY: LONG,
    pub wAxisVZ: LONG,
    pub wAxisVBRX: LONG,
    pub wAxisVBRY: LONG,
    pub wAxisVBRZ: LONG,
    pub lButtons: LONG,
    pub bHats: DWORD,
    pub bHatsEx1: DWORD,
    pub bHatsEx2: DWORD,
    pub bHatsEx3: DWORD,
}
#[test]
fn bindgen_test_layout__JOYSTICK_POSITION() {
    assert_eq!(
        ::std::mem::size_of::<_JOYSTICK_POSITION>(),
        96usize,
        concat!("Size of: ", stringify!(_JOYSTICK_POSITION))
    );
    assert_eq!(
        ::std::mem::align_of::<_JOYSTICK_POSITION>(),
        4usize,
        concat!("Alignment of ", stringify!(_JOYSTICK_POSITION))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_JOYSTICK_POSITION>())).bDevice as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_JOYSTICK_POSITION),
            "::",
            stringify!(bDevice)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_JOYSTICK_POSITION>())).wThrottle as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_JOYSTICK_POSITION),
            "::",
            stringify!(wThrottle)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_JOYSTICK_POSITION>())).wRudder as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_JOYSTICK_POSITION),
            "::",
            stringify!(wRudder)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_JOYSTICK_POSITION>())).wAileron as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_JOYSTICK_POSITION),
            "::",
            stringify!(wAileron)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_JOYSTICK_POSITION>())).wAxisX as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_JOYSTICK_POSITION),
            "::",
            stringify!(wAxisX)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_JOYSTICK_POSITION>())).wAxisY as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(_JOYSTICK_POSITION),
            "::",
            stringify!(wAxisY)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_JOYSTICK_POSITION>())).wAxisZ as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_JOYSTICK_POSITION),
            "::",
            stringify!(wAxisZ)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_JOYSTICK_POSITION>())).wAxisXRot as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(_JOYSTICK_POSITION),
            "::",
            stringify!(wAxisXRot)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_JOYSTICK_POSITION>())).wAxisYRot as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_JOYSTICK_POSITION),
            "::",
            stringify!(wAxisYRot)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_JOYSTICK_POSITION>())).wAxisZRot as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(_JOYSTICK_POSITION),
            "::",
            stringify!(wAxisZRot)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_JOYSTICK_POSITION>())).wSlider as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_JOYSTICK_POSITION),
            "::",
            stringify!(wSlider)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_JOYSTICK_POSITION>())).wDial as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(_JOYSTICK_POSITION),
            "::",
            stringify!(wDial)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_JOYSTICK_POSITION>())).wWheel as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_JOYSTICK_POSITION),
            "::",
            stringify!(wWheel)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_JOYSTICK_POSITION>())).wAxisVX as *const _ as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(_JOYSTICK_POSITION),
            "::",
            stringify!(wAxisVX)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_JOYSTICK_POSITION>())).wAxisVY as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_JOYSTICK_POSITION),
            "::",
            stringify!(wAxisVY)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_JOYSTICK_POSITION>())).wAxisVZ as *const _ as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(_JOYSTICK_POSITION),
            "::",
            stringify!(wAxisVZ)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_JOYSTICK_POSITION>())).wAxisVBRX as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_JOYSTICK_POSITION),
            "::",
            stringify!(wAxisVBRX)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_JOYSTICK_POSITION>())).wAxisVBRY as *const _ as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(_JOYSTICK_POSITION),
            "::",
            stringify!(wAxisVBRY)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_JOYSTICK_POSITION>())).wAxisVBRZ as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_JOYSTICK_POSITION),
            "::",
            stringify!(wAxisVBRZ)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_JOYSTICK_POSITION>())).lButtons as *const _ as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(_JOYSTICK_POSITION),
            "::",
            stringify!(lButtons)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_JOYSTICK_POSITION>())).bHats as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_JOYSTICK_POSITION),
            "::",
            stringify!(bHats)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_JOYSTICK_POSITION>())).bHatsEx1 as *const _ as usize },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(_JOYSTICK_POSITION),
            "::",
            stringify!(bHatsEx1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_JOYSTICK_POSITION>())).bHatsEx2 as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(_JOYSTICK_POSITION),
            "::",
            stringify!(bHatsEx2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_JOYSTICK_POSITION>())).bHatsEx3 as *const _ as usize },
        92usize,
        concat!(
            "Offset of field: ",
            stringify!(_JOYSTICK_POSITION),
            "::",
            stringify!(bHatsEx3)
        )
    );
}
pub type JOYSTICK_POSITION = _JOYSTICK_POSITION;
pub type PJOYSTICK_POSITION = *mut _JOYSTICK_POSITION;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _JOYSTICK_POSITION_V2 {
    #[doc = " JOYSTICK_POSITION"]
    pub bDevice: BYTE,
    pub wThrottle: LONG,
    pub wRudder: LONG,
    pub wAileron: LONG,
    pub wAxisX: LONG,
    pub wAxisY: LONG,
    pub wAxisZ: LONG,
    pub wAxisXRot: LONG,
    pub wAxisYRot: LONG,
    pub wAxisZRot: LONG,
    pub wSlider: LONG,
    pub wDial: LONG,
    pub wWheel: LONG,
    pub wAxisVX: LONG,
    pub wAxisVY: LONG,
    pub wAxisVZ: LONG,
    pub wAxisVBRX: LONG,
    pub wAxisVBRY: LONG,
    pub wAxisVBRZ: LONG,
    pub lButtons: LONG,
    pub bHats: DWORD,
    pub bHatsEx1: DWORD,
    pub bHatsEx2: DWORD,
    pub bHatsEx3: DWORD,
    #[doc = " JOYSTICK_POSITION_V2 Extenssion"]
    pub lButtonsEx1: LONG,
    pub lButtonsEx2: LONG,
    pub lButtonsEx3: LONG,
}
#[test]
fn bindgen_test_layout__JOYSTICK_POSITION_V2() {
    assert_eq!(
        ::std::mem::size_of::<_JOYSTICK_POSITION_V2>(),
        108usize,
        concat!("Size of: ", stringify!(_JOYSTICK_POSITION_V2))
    );
    assert_eq!(
        ::std::mem::align_of::<_JOYSTICK_POSITION_V2>(),
        4usize,
        concat!("Alignment of ", stringify!(_JOYSTICK_POSITION_V2))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_JOYSTICK_POSITION_V2>())).bDevice as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_JOYSTICK_POSITION_V2),
            "::",
            stringify!(bDevice)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_JOYSTICK_POSITION_V2>())).wThrottle as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_JOYSTICK_POSITION_V2),
            "::",
            stringify!(wThrottle)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_JOYSTICK_POSITION_V2>())).wRudder as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_JOYSTICK_POSITION_V2),
            "::",
            stringify!(wRudder)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_JOYSTICK_POSITION_V2>())).wAileron as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_JOYSTICK_POSITION_V2),
            "::",
            stringify!(wAileron)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_JOYSTICK_POSITION_V2>())).wAxisX as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_JOYSTICK_POSITION_V2),
            "::",
            stringify!(wAxisX)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_JOYSTICK_POSITION_V2>())).wAxisY as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(_JOYSTICK_POSITION_V2),
            "::",
            stringify!(wAxisY)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_JOYSTICK_POSITION_V2>())).wAxisZ as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_JOYSTICK_POSITION_V2),
            "::",
            stringify!(wAxisZ)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_JOYSTICK_POSITION_V2>())).wAxisXRot as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(_JOYSTICK_POSITION_V2),
            "::",
            stringify!(wAxisXRot)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_JOYSTICK_POSITION_V2>())).wAxisYRot as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_JOYSTICK_POSITION_V2),
            "::",
            stringify!(wAxisYRot)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_JOYSTICK_POSITION_V2>())).wAxisZRot as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(_JOYSTICK_POSITION_V2),
            "::",
            stringify!(wAxisZRot)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_JOYSTICK_POSITION_V2>())).wSlider as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_JOYSTICK_POSITION_V2),
            "::",
            stringify!(wSlider)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_JOYSTICK_POSITION_V2>())).wDial as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(_JOYSTICK_POSITION_V2),
            "::",
            stringify!(wDial)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_JOYSTICK_POSITION_V2>())).wWheel as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_JOYSTICK_POSITION_V2),
            "::",
            stringify!(wWheel)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_JOYSTICK_POSITION_V2>())).wAxisVX as *const _ as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(_JOYSTICK_POSITION_V2),
            "::",
            stringify!(wAxisVX)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_JOYSTICK_POSITION_V2>())).wAxisVY as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_JOYSTICK_POSITION_V2),
            "::",
            stringify!(wAxisVY)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_JOYSTICK_POSITION_V2>())).wAxisVZ as *const _ as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(_JOYSTICK_POSITION_V2),
            "::",
            stringify!(wAxisVZ)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_JOYSTICK_POSITION_V2>())).wAxisVBRX as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_JOYSTICK_POSITION_V2),
            "::",
            stringify!(wAxisVBRX)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_JOYSTICK_POSITION_V2>())).wAxisVBRY as *const _ as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(_JOYSTICK_POSITION_V2),
            "::",
            stringify!(wAxisVBRY)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_JOYSTICK_POSITION_V2>())).wAxisVBRZ as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_JOYSTICK_POSITION_V2),
            "::",
            stringify!(wAxisVBRZ)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_JOYSTICK_POSITION_V2>())).lButtons as *const _ as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(_JOYSTICK_POSITION_V2),
            "::",
            stringify!(lButtons)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_JOYSTICK_POSITION_V2>())).bHats as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_JOYSTICK_POSITION_V2),
            "::",
            stringify!(bHats)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_JOYSTICK_POSITION_V2>())).bHatsEx1 as *const _ as usize },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(_JOYSTICK_POSITION_V2),
            "::",
            stringify!(bHatsEx1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_JOYSTICK_POSITION_V2>())).bHatsEx2 as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(_JOYSTICK_POSITION_V2),
            "::",
            stringify!(bHatsEx2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_JOYSTICK_POSITION_V2>())).bHatsEx3 as *const _ as usize },
        92usize,
        concat!(
            "Offset of field: ",
            stringify!(_JOYSTICK_POSITION_V2),
            "::",
            stringify!(bHatsEx3)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_JOYSTICK_POSITION_V2>())).lButtonsEx1 as *const _ as usize
        },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(_JOYSTICK_POSITION_V2),
            "::",
            stringify!(lButtonsEx1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_JOYSTICK_POSITION_V2>())).lButtonsEx2 as *const _ as usize
        },
        100usize,
        concat!(
            "Offset of field: ",
            stringify!(_JOYSTICK_POSITION_V2),
            "::",
            stringify!(lButtonsEx2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_JOYSTICK_POSITION_V2>())).lButtonsEx3 as *const _ as usize
        },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(_JOYSTICK_POSITION_V2),
            "::",
            stringify!(lButtonsEx3)
        )
    );
}
pub type JOYSTICK_POSITION_V2 = _JOYSTICK_POSITION_V2;
pub type PJOYSTICK_POSITION_V2 = *mut _JOYSTICK_POSITION_V2;
pub type SHORT = ::std::os::raw::c_short;
pub type UCHAR = ::std::os::raw::c_uchar;
pub type UINT = ::std::os::raw::c_uint;
pub type WORD = ::std::os::raw::c_ushort;
pub type PVOID = *mut ::std::os::raw::c_void;
pub type VOID = ::std::os::raw::c_void;
pub type HANDLE = PVOID;
pub type HDEVNOTIFY = PVOID;
pub const VjdStat_VJD_STAT_OWN: VjdStat = 0;
pub const VjdStat_VJD_STAT_FREE: VjdStat = 1;
pub const VjdStat_VJD_STAT_BUSY: VjdStat = 2;
pub const VjdStat_VJD_STAT_MISS: VjdStat = 3;
pub const VjdStat_VJD_STAT_UNKN: VjdStat = 4;
pub type VjdStat = i32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DEVCTRLS {
    pub Init: BOOL,
    pub Rudder: BOOL,
    pub Aileron: BOOL,
    pub AxisX: BOOL,
    pub AxisY: BOOL,
    pub AxisZ: BOOL,
    pub AxisXRot: BOOL,
    pub AxisYRot: BOOL,
    pub AxisZRot: BOOL,
    pub Slider: BOOL,
    pub Dial: BOOL,
    pub Wheel: BOOL,
    pub AxisVX: BOOL,
    pub AxisVY: BOOL,
    pub AxisVZ: BOOL,
    pub AxisVBRX: BOOL,
    pub AxisVBRY: BOOL,
    pub AxisVBRZ: BOOL,
    pub nButtons: INT,
    pub nDescHats: INT,
    pub nContHats: INT,
}
#[test]
fn bindgen_test_layout_DEVCTRLS() {
    assert_eq!(
        ::std::mem::size_of::<DEVCTRLS>(),
        84usize,
        concat!("Size of: ", stringify!(DEVCTRLS))
    );
    assert_eq!(
        ::std::mem::align_of::<DEVCTRLS>(),
        4usize,
        concat!("Alignment of ", stringify!(DEVCTRLS))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DEVCTRLS>())).Init as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DEVCTRLS),
            "::",
            stringify!(Init)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DEVCTRLS>())).Rudder as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(DEVCTRLS),
            "::",
            stringify!(Rudder)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DEVCTRLS>())).Aileron as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(DEVCTRLS),
            "::",
            stringify!(Aileron)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DEVCTRLS>())).AxisX as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(DEVCTRLS),
            "::",
            stringify!(AxisX)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DEVCTRLS>())).AxisY as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(DEVCTRLS),
            "::",
            stringify!(AxisY)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DEVCTRLS>())).AxisZ as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(DEVCTRLS),
            "::",
            stringify!(AxisZ)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DEVCTRLS>())).AxisXRot as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(DEVCTRLS),
            "::",
            stringify!(AxisXRot)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DEVCTRLS>())).AxisYRot as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(DEVCTRLS),
            "::",
            stringify!(AxisYRot)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DEVCTRLS>())).AxisZRot as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(DEVCTRLS),
            "::",
            stringify!(AxisZRot)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DEVCTRLS>())).Slider as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(DEVCTRLS),
            "::",
            stringify!(Slider)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DEVCTRLS>())).Dial as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(DEVCTRLS),
            "::",
            stringify!(Dial)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DEVCTRLS>())).Wheel as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(DEVCTRLS),
            "::",
            stringify!(Wheel)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DEVCTRLS>())).AxisVX as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(DEVCTRLS),
            "::",
            stringify!(AxisVX)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DEVCTRLS>())).AxisVY as *const _ as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(DEVCTRLS),
            "::",
            stringify!(AxisVY)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DEVCTRLS>())).AxisVZ as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(DEVCTRLS),
            "::",
            stringify!(AxisVZ)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DEVCTRLS>())).AxisVBRX as *const _ as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(DEVCTRLS),
            "::",
            stringify!(AxisVBRX)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DEVCTRLS>())).AxisVBRY as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(DEVCTRLS),
            "::",
            stringify!(AxisVBRY)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DEVCTRLS>())).AxisVBRZ as *const _ as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(DEVCTRLS),
            "::",
            stringify!(AxisVBRZ)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DEVCTRLS>())).nButtons as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(DEVCTRLS),
            "::",
            stringify!(nButtons)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DEVCTRLS>())).nDescHats as *const _ as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(DEVCTRLS),
            "::",
            stringify!(nDescHats)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DEVCTRLS>())).nContHats as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(DEVCTRLS),
            "::",
            stringify!(nContHats)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DeviceStat {
    pub h: HANDLE,
    pub stat: VjdStat,
    pub position: JOYSTICK_POSITION_V2,
    pub hDeviceNotifyHandle: HDEVNOTIFY,
    pub DeviceControls: DEVCTRLS,
    pub pPreParsedData: PVOID,
}
#[test]
fn bindgen_test_layout_DeviceStat() {
    assert_eq!(
        ::std::mem::size_of::<DeviceStat>(),
        224usize,
        concat!("Size of: ", stringify!(DeviceStat))
    );
    assert_eq!(
        ::std::mem::align_of::<DeviceStat>(),
        8usize,
        concat!("Alignment of ", stringify!(DeviceStat))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DeviceStat>())).h as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DeviceStat),
            "::",
            stringify!(h)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DeviceStat>())).stat as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(DeviceStat),
            "::",
            stringify!(stat)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DeviceStat>())).position as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(DeviceStat),
            "::",
            stringify!(position)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DeviceStat>())).hDeviceNotifyHandle as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(DeviceStat),
            "::",
            stringify!(hDeviceNotifyHandle)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DeviceStat>())).DeviceControls as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(DeviceStat),
            "::",
            stringify!(DeviceControls)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DeviceStat>())).pPreParsedData as *const _ as usize },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(DeviceStat),
            "::",
            stringify!(pPreParsedData)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DEV_INFO {
    pub DeviceID: BYTE,
    pub nImplemented: BYTE,
    pub isImplemented: BYTE,
    pub MaxDevices: BYTE,
    pub DriverFFB: BYTE,
    pub DeviceFFB: BYTE,
}
#[test]
fn bindgen_test_layout_DEV_INFO() {
    assert_eq!(
        ::std::mem::size_of::<DEV_INFO>(),
        6usize,
        concat!("Size of: ", stringify!(DEV_INFO))
    );
    assert_eq!(
        ::std::mem::align_of::<DEV_INFO>(),
        1usize,
        concat!("Alignment of ", stringify!(DEV_INFO))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DEV_INFO>())).DeviceID as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DEV_INFO),
            "::",
            stringify!(DeviceID)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DEV_INFO>())).nImplemented as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(DEV_INFO),
            "::",
            stringify!(nImplemented)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DEV_INFO>())).isImplemented as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(DEV_INFO),
            "::",
            stringify!(isImplemented)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DEV_INFO>())).MaxDevices as *const _ as usize },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(DEV_INFO),
            "::",
            stringify!(MaxDevices)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DEV_INFO>())).DriverFFB as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(DEV_INFO),
            "::",
            stringify!(DriverFFB)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DEV_INFO>())).DeviceFFB as *const _ as usize },
        5usize,
        concat!(
            "Offset of field: ",
            stringify!(DEV_INFO),
            "::",
            stringify!(DeviceFFB)
        )
    );
}
pub type RemovalCB =
    ::std::option::Option<unsafe extern "C" fn(arg1: BOOL, arg2: BOOL, arg3: PVOID)>;
pub const FFBEType_ET_NONE: FFBEType = 0;
pub const FFBEType_ET_CONST: FFBEType = 1;
pub const FFBEType_ET_RAMP: FFBEType = 2;
pub const FFBEType_ET_SQR: FFBEType = 3;
pub const FFBEType_ET_SINE: FFBEType = 4;
pub const FFBEType_ET_TRNGL: FFBEType = 5;
pub const FFBEType_ET_STUP: FFBEType = 6;
pub const FFBEType_ET_STDN: FFBEType = 7;
pub const FFBEType_ET_SPRNG: FFBEType = 8;
pub const FFBEType_ET_DMPR: FFBEType = 9;
pub const FFBEType_ET_INRT: FFBEType = 10;
pub const FFBEType_ET_FRCTN: FFBEType = 11;
pub const FFBEType_ET_CSTM: FFBEType = 12;
pub type FFBEType = i32;
pub const FFBPType_PT_EFFREP: FFBPType = 1;
pub const FFBPType_PT_ENVREP: FFBPType = 2;
pub const FFBPType_PT_CONDREP: FFBPType = 3;
pub const FFBPType_PT_PRIDREP: FFBPType = 4;
pub const FFBPType_PT_CONSTREP: FFBPType = 5;
pub const FFBPType_PT_RAMPREP: FFBPType = 6;
pub const FFBPType_PT_CSTMREP: FFBPType = 7;
pub const FFBPType_PT_SMPLREP: FFBPType = 8;
pub const FFBPType_PT_EFOPREP: FFBPType = 10;
pub const FFBPType_PT_BLKFRREP: FFBPType = 11;
pub const FFBPType_PT_CTRLREP: FFBPType = 12;
pub const FFBPType_PT_GAINREP: FFBPType = 13;
pub const FFBPType_PT_SETCREP: FFBPType = 14;
pub const FFBPType_PT_NEWEFREP: FFBPType = 17;
pub const FFBPType_PT_BLKLDREP: FFBPType = 18;
pub const FFBPType_PT_POOLREP: FFBPType = 19;
pub type FFBPType = i32;
pub const FFBOP_EFF_START: FFBOP = 1;
pub const FFBOP_EFF_SOLO: FFBOP = 2;
pub const FFBOP_EFF_STOP: FFBOP = 3;
pub type FFBOP = i32;
pub const FFB_CTRL_CTRL_ENACT: FFB_CTRL = 1;
pub const FFB_CTRL_CTRL_DISACT: FFB_CTRL = 2;
pub const FFB_CTRL_CTRL_STOPALL: FFB_CTRL = 3;
pub const FFB_CTRL_CTRL_DEVRST: FFB_CTRL = 4;
pub const FFB_CTRL_CTRL_DEVPAUSE: FFB_CTRL = 5;
pub const FFB_CTRL_CTRL_DEVCONT: FFB_CTRL = 6;
pub type FFB_CTRL = i32;
pub const FFB_EFFECTS_Constant: FFB_EFFECTS = 1;
pub const FFB_EFFECTS_Ramp: FFB_EFFECTS = 2;
pub const FFB_EFFECTS_Square: FFB_EFFECTS = 4;
pub const FFB_EFFECTS_Sine: FFB_EFFECTS = 8;
pub const FFB_EFFECTS_Triangle: FFB_EFFECTS = 16;
pub const FFB_EFFECTS_Sawtooth_Up: FFB_EFFECTS = 32;
pub const FFB_EFFECTS_Sawtooth_Dn: FFB_EFFECTS = 64;
pub const FFB_EFFECTS_Spring: FFB_EFFECTS = 128;
pub const FFB_EFFECTS_Damper: FFB_EFFECTS = 256;
pub const FFB_EFFECTS_Inertia: FFB_EFFECTS = 512;
pub const FFB_EFFECTS_Friction: FFB_EFFECTS = 1024;
pub const FFB_EFFECTS_Custom: FFB_EFFECTS = 2048;
pub type FFB_EFFECTS = i32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FFB_DATA {
    pub size: ULONG,
    pub cmd: ULONG,
    pub data: *mut UCHAR,
}
#[test]
fn bindgen_test_layout__FFB_DATA() {
    assert_eq!(
        ::std::mem::size_of::<_FFB_DATA>(),
        16usize,
        concat!("Size of: ", stringify!(_FFB_DATA))
    );
    assert_eq!(
        ::std::mem::align_of::<_FFB_DATA>(),
        8usize,
        concat!("Alignment of ", stringify!(_FFB_DATA))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_FFB_DATA>())).size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_FFB_DATA),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_FFB_DATA>())).cmd as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_FFB_DATA),
            "::",
            stringify!(cmd)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_FFB_DATA>())).data as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_FFB_DATA),
            "::",
            stringify!(data)
        )
    );
}
pub type FFB_DATA = _FFB_DATA;
pub type PFFB_DATA = *mut _FFB_DATA;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FFB_EFF_CONSTANT {
    pub EffectBlockIndex: BYTE,
    pub Magnitude: LONG,
}
#[test]
fn bindgen_test_layout__FFB_EFF_CONSTANT() {
    assert_eq!(
        ::std::mem::size_of::<_FFB_EFF_CONSTANT>(),
        8usize,
        concat!("Size of: ", stringify!(_FFB_EFF_CONSTANT))
    );
    assert_eq!(
        ::std::mem::align_of::<_FFB_EFF_CONSTANT>(),
        4usize,
        concat!("Alignment of ", stringify!(_FFB_EFF_CONSTANT))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_FFB_EFF_CONSTANT>())).EffectBlockIndex as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_FFB_EFF_CONSTANT),
            "::",
            stringify!(EffectBlockIndex)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_FFB_EFF_CONSTANT>())).Magnitude as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_FFB_EFF_CONSTANT),
            "::",
            stringify!(Magnitude)
        )
    );
}
pub type FFB_EFF_CONSTANT = _FFB_EFF_CONSTANT;
pub type PFFB_EFF_CONSTANT = *mut _FFB_EFF_CONSTANT;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FFB_EFF_RAMP {
    pub EffectBlockIndex: BYTE,
    pub Start: LONG,
    pub End: LONG,
}
#[test]
fn bindgen_test_layout__FFB_EFF_RAMP() {
    assert_eq!(
        ::std::mem::size_of::<_FFB_EFF_RAMP>(),
        12usize,
        concat!("Size of: ", stringify!(_FFB_EFF_RAMP))
    );
    assert_eq!(
        ::std::mem::align_of::<_FFB_EFF_RAMP>(),
        4usize,
        concat!("Alignment of ", stringify!(_FFB_EFF_RAMP))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_FFB_EFF_RAMP>())).EffectBlockIndex as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_FFB_EFF_RAMP),
            "::",
            stringify!(EffectBlockIndex)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_FFB_EFF_RAMP>())).Start as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_FFB_EFF_RAMP),
            "::",
            stringify!(Start)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_FFB_EFF_RAMP>())).End as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_FFB_EFF_RAMP),
            "::",
            stringify!(End)
        )
    );
}
pub type FFB_EFF_RAMP = _FFB_EFF_RAMP;
pub type PFFB_EFF_RAMP = *mut _FFB_EFF_RAMP;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FFB_EFF_REPORT {
    pub EffectBlockIndex: BYTE,
    pub EffectType: FFBEType,
    pub Duration: WORD,
    pub TrigerRpt: WORD,
    pub SamplePrd: WORD,
    pub Gain: BYTE,
    pub TrigerBtn: BYTE,
    pub Polar: BOOL,
    pub DirX: BYTE,
    pub DirY: BYTE,
}
#[test]
fn bindgen_test_layout__FFB_EFF_REPORT() {
    assert_eq!(
        ::std::mem::size_of::<_FFB_EFF_REPORT>(),
        24usize,
        concat!("Size of: ", stringify!(_FFB_EFF_REPORT))
    );
    assert_eq!(
        ::std::mem::align_of::<_FFB_EFF_REPORT>(),
        4usize,
        concat!("Alignment of ", stringify!(_FFB_EFF_REPORT))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_FFB_EFF_REPORT>())).EffectBlockIndex as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_FFB_EFF_REPORT),
            "::",
            stringify!(EffectBlockIndex)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_FFB_EFF_REPORT>())).EffectType as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_FFB_EFF_REPORT),
            "::",
            stringify!(EffectType)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_FFB_EFF_REPORT>())).Duration as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_FFB_EFF_REPORT),
            "::",
            stringify!(Duration)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_FFB_EFF_REPORT>())).TrigerRpt as *const _ as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(_FFB_EFF_REPORT),
            "::",
            stringify!(TrigerRpt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_FFB_EFF_REPORT>())).SamplePrd as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_FFB_EFF_REPORT),
            "::",
            stringify!(SamplePrd)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_FFB_EFF_REPORT>())).Gain as *const _ as usize },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(_FFB_EFF_REPORT),
            "::",
            stringify!(Gain)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_FFB_EFF_REPORT>())).TrigerBtn as *const _ as usize },
        15usize,
        concat!(
            "Offset of field: ",
            stringify!(_FFB_EFF_REPORT),
            "::",
            stringify!(TrigerBtn)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_FFB_EFF_REPORT>())).Polar as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_FFB_EFF_REPORT),
            "::",
            stringify!(Polar)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_FFB_EFF_REPORT>())).DirX as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(_FFB_EFF_REPORT),
            "::",
            stringify!(DirX)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_FFB_EFF_REPORT>())).DirY as *const _ as usize },
        21usize,
        concat!(
            "Offset of field: ",
            stringify!(_FFB_EFF_REPORT),
            "::",
            stringify!(DirY)
        )
    );
}
pub type FFB_EFF_REPORT = _FFB_EFF_REPORT;
pub type PFFB_EFF_REPORT = *mut _FFB_EFF_REPORT;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FFB_EFF_OP {
    pub EffectBlockIndex: BYTE,
    pub EffectOp: FFBOP,
    pub LoopCount: BYTE,
}
#[test]
fn bindgen_test_layout__FFB_EFF_OP() {
    assert_eq!(
        ::std::mem::size_of::<_FFB_EFF_OP>(),
        12usize,
        concat!("Size of: ", stringify!(_FFB_EFF_OP))
    );
    assert_eq!(
        ::std::mem::align_of::<_FFB_EFF_OP>(),
        4usize,
        concat!("Alignment of ", stringify!(_FFB_EFF_OP))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_FFB_EFF_OP>())).EffectBlockIndex as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_FFB_EFF_OP),
            "::",
            stringify!(EffectBlockIndex)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_FFB_EFF_OP>())).EffectOp as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_FFB_EFF_OP),
            "::",
            stringify!(EffectOp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_FFB_EFF_OP>())).LoopCount as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_FFB_EFF_OP),
            "::",
            stringify!(LoopCount)
        )
    );
}
pub type FFB_EFF_OP = _FFB_EFF_OP;
pub type PFFB_EFF_OP = *mut _FFB_EFF_OP;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FFB_EFF_PERIOD {
    pub EffectBlockIndex: BYTE,
    pub Magnitude: DWORD,
    pub Offset: LONG,
    pub Phase: DWORD,
    pub Period: DWORD,
}
#[test]
fn bindgen_test_layout__FFB_EFF_PERIOD() {
    assert_eq!(
        ::std::mem::size_of::<_FFB_EFF_PERIOD>(),
        20usize,
        concat!("Size of: ", stringify!(_FFB_EFF_PERIOD))
    );
    assert_eq!(
        ::std::mem::align_of::<_FFB_EFF_PERIOD>(),
        4usize,
        concat!("Alignment of ", stringify!(_FFB_EFF_PERIOD))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_FFB_EFF_PERIOD>())).EffectBlockIndex as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_FFB_EFF_PERIOD),
            "::",
            stringify!(EffectBlockIndex)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_FFB_EFF_PERIOD>())).Magnitude as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_FFB_EFF_PERIOD),
            "::",
            stringify!(Magnitude)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_FFB_EFF_PERIOD>())).Offset as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_FFB_EFF_PERIOD),
            "::",
            stringify!(Offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_FFB_EFF_PERIOD>())).Phase as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_FFB_EFF_PERIOD),
            "::",
            stringify!(Phase)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_FFB_EFF_PERIOD>())).Period as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_FFB_EFF_PERIOD),
            "::",
            stringify!(Period)
        )
    );
}
pub type FFB_EFF_PERIOD = _FFB_EFF_PERIOD;
pub type PFFB_EFF_PERIOD = *mut _FFB_EFF_PERIOD;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FFB_EFF_COND {
    pub EffectBlockIndex: BYTE,
    pub isY: BOOL,
    pub CenterPointOffset: LONG,
    pub PosCoeff: LONG,
    pub NegCoeff: LONG,
    pub PosSatur: DWORD,
    pub NegSatur: DWORD,
    pub DeadBand: LONG,
}
#[test]
fn bindgen_test_layout__FFB_EFF_COND() {
    assert_eq!(
        ::std::mem::size_of::<_FFB_EFF_COND>(),
        32usize,
        concat!("Size of: ", stringify!(_FFB_EFF_COND))
    );
    assert_eq!(
        ::std::mem::align_of::<_FFB_EFF_COND>(),
        4usize,
        concat!("Alignment of ", stringify!(_FFB_EFF_COND))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_FFB_EFF_COND>())).EffectBlockIndex as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_FFB_EFF_COND),
            "::",
            stringify!(EffectBlockIndex)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_FFB_EFF_COND>())).isY as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_FFB_EFF_COND),
            "::",
            stringify!(isY)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_FFB_EFF_COND>())).CenterPointOffset as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_FFB_EFF_COND),
            "::",
            stringify!(CenterPointOffset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_FFB_EFF_COND>())).PosCoeff as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_FFB_EFF_COND),
            "::",
            stringify!(PosCoeff)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_FFB_EFF_COND>())).NegCoeff as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_FFB_EFF_COND),
            "::",
            stringify!(NegCoeff)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_FFB_EFF_COND>())).PosSatur as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(_FFB_EFF_COND),
            "::",
            stringify!(PosSatur)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_FFB_EFF_COND>())).NegSatur as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_FFB_EFF_COND),
            "::",
            stringify!(NegSatur)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_FFB_EFF_COND>())).DeadBand as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(_FFB_EFF_COND),
            "::",
            stringify!(DeadBand)
        )
    );
}
pub type FFB_EFF_COND = _FFB_EFF_COND;
pub type PFFB_EFF_COND = *mut _FFB_EFF_COND;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FFB_EFF_ENVLP {
    pub EffectBlockIndex: BYTE,
    pub AttackLevel: DWORD,
    pub FadeLevel: DWORD,
    pub AttackTime: DWORD,
    pub FadeTime: DWORD,
}
#[test]
fn bindgen_test_layout__FFB_EFF_ENVLP() {
    assert_eq!(
        ::std::mem::size_of::<_FFB_EFF_ENVLP>(),
        20usize,
        concat!("Size of: ", stringify!(_FFB_EFF_ENVLP))
    );
    assert_eq!(
        ::std::mem::align_of::<_FFB_EFF_ENVLP>(),
        4usize,
        concat!("Alignment of ", stringify!(_FFB_EFF_ENVLP))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_FFB_EFF_ENVLP>())).EffectBlockIndex as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_FFB_EFF_ENVLP),
            "::",
            stringify!(EffectBlockIndex)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_FFB_EFF_ENVLP>())).AttackLevel as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_FFB_EFF_ENVLP),
            "::",
            stringify!(AttackLevel)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_FFB_EFF_ENVLP>())).FadeLevel as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_FFB_EFF_ENVLP),
            "::",
            stringify!(FadeLevel)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_FFB_EFF_ENVLP>())).AttackTime as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_FFB_EFF_ENVLP),
            "::",
            stringify!(AttackTime)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_FFB_EFF_ENVLP>())).FadeTime as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_FFB_EFF_ENVLP),
            "::",
            stringify!(FadeTime)
        )
    );
}
pub type FFB_EFF_ENVLP = _FFB_EFF_ENVLP;
pub type PFFB_EFF_ENVLP = *mut _FFB_EFF_ENVLP;
pub type FfbGenCB = ::std::option::Option<unsafe extern "C" fn(arg1: PVOID, arg2: PVOID)>;
extern "C" {
    #[doc = "\tGeneral driver data"]
    pub fn GetvJoyVersion() -> SHORT;
}
extern "C" {
    pub fn vJoyEnabled() -> BOOL;
}
extern "C" {
    pub fn GetvJoyProductString() -> PVOID;
}
extern "C" {
    pub fn GetvJoyManufacturerString() -> PVOID;
}
extern "C" {
    pub fn GetvJoySerialNumberString() -> PVOID;
}
extern "C" {
    pub fn DriverMatch(DllVer: *mut WORD, DrvVer: *mut WORD) -> BOOL;
}
extern "C" {
    pub fn RegisterRemovalCB(cb: RemovalCB, data: PVOID) -> VOID;
}
extern "C" {
    pub fn vJoyFfbCap(Supported: *mut BOOL) -> BOOL;
}
extern "C" {
    pub fn GetvJoyMaxDevices(n: *mut ::std::os::raw::c_int) -> BOOL;
}
extern "C" {
    pub fn GetNumberExistingVJD(n: *mut ::std::os::raw::c_int) -> BOOL;
}
extern "C" {
    #[doc = "\tvJoy Device properties"]
    pub fn GetVJDButtonNumber(rID: UINT) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn GetVJDDiscPovNumber(rID: UINT) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn GetVJDContPovNumber(rID: UINT) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn GetVJDAxisExist(rID: UINT, Axis: UINT) -> BOOL;
}
extern "C" {
    pub fn GetVJDAxisMax(rID: UINT, Axis: UINT, Max: *mut LONG) -> BOOL;
}
extern "C" {
    pub fn GetVJDAxisMin(rID: UINT, Axis: UINT, Min: *mut LONG) -> BOOL;
}
extern "C" {
    pub fn GetVJDStatus(rID: UINT) -> VjdStat;
}
extern "C" {
    pub fn isVJDExists(rID: UINT) -> BOOL;
}
extern "C" {
    pub fn GetOwnerPid(rID: UINT) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = "\tWrite access to vJoy Device - Basic"]
    pub fn AcquireVJD(rID: UINT) -> BOOL;
}
extern "C" {
    pub fn RelinquishVJD(rID: UINT) -> VOID;
}
extern "C" {
    pub fn UpdateVJD(rID: UINT, pData: PVOID) -> BOOL;
}
extern "C" {
    #[doc = " Reset functions"]
    pub fn ResetVJD(rID: UINT) -> BOOL;
}
extern "C" {
    pub fn ResetAll() -> VOID;
}
extern "C" {
    pub fn ResetButtons(rID: UINT) -> BOOL;
}
extern "C" {
    pub fn ResetPovs(rID: UINT) -> BOOL;
}
extern "C" {
    pub fn SetAxis(Value: LONG, rID: UINT, Axis: UINT) -> BOOL;
}
extern "C" {
    pub fn SetBtn(Value: BOOL, rID: UINT, nBtn: UCHAR) -> BOOL;
}
extern "C" {
    pub fn SetDiscPov(Value: ::std::os::raw::c_int, rID: UINT, nPov: UCHAR) -> BOOL;
}
extern "C" {
    pub fn SetContPov(Value: DWORD, rID: UINT, nPov: UCHAR) -> BOOL;
}
extern "C" {
    pub fn FfbGetEffect() -> FFBEType;
}
extern "C" {
    pub fn FfbRegisterGenCB(cb: FfbGenCB, data: PVOID) -> VOID;
}
extern "C" {
    pub fn FfbStart(rID: UINT) -> BOOL;
}
extern "C" {
    pub fn FfbStop(rID: UINT) -> VOID;
}
extern "C" {
    pub fn IsDeviceFfb(rID: UINT) -> BOOL;
}
extern "C" {
    pub fn IsDeviceFfbEffect(rID: UINT, Effect: UINT) -> BOOL;
}
extern "C" {
    pub fn Ffb_h_DeviceID(Packet: *const FFB_DATA, DeviceID: *mut ::std::os::raw::c_int) -> DWORD;
}
extern "C" {
    pub fn Ffb_h_Type(Packet: *const FFB_DATA, Type: *mut FFBPType) -> DWORD;
}
extern "C" {
    pub fn Ffb_h_Packet(
        Packet: *const FFB_DATA,
        Type: *mut WORD,
        DataSize: *mut ::std::os::raw::c_int,
        Data: *mut *mut BYTE,
    ) -> DWORD;
}
extern "C" {
    pub fn Ffb_h_EBI(Packet: *const FFB_DATA, Index: *mut ::std::os::raw::c_int) -> DWORD;
}
extern "C" {
    pub fn Ffb_h_Eff_Report(Packet: *const FFB_DATA, Effect: *mut FFB_EFF_REPORT) -> DWORD;
}
extern "C" {
    pub fn Ffb_h_Eff_Ramp(Packet: *const FFB_DATA, RampEffect: *mut FFB_EFF_RAMP) -> DWORD;
}
extern "C" {
    pub fn Ffb_h_EffOp(Packet: *const FFB_DATA, Operation: *mut FFB_EFF_OP) -> DWORD;
}
extern "C" {
    pub fn Ffb_h_DevCtrl(Packet: *const FFB_DATA, Control: *mut FFB_CTRL) -> DWORD;
}
extern "C" {
    pub fn Ffb_h_Eff_Period(Packet: *const FFB_DATA, Effect: *mut FFB_EFF_PERIOD) -> DWORD;
}
extern "C" {
    pub fn Ffb_h_Eff_Cond(Packet: *const FFB_DATA, Condition: *mut FFB_EFF_COND) -> DWORD;
}
extern "C" {
    pub fn Ffb_h_DevGain(Packet: *const FFB_DATA, Gain: *mut BYTE) -> DWORD;
}
extern "C" {
    pub fn Ffb_h_Eff_Envlp(Packet: *const FFB_DATA, Envelope: *mut FFB_EFF_ENVLP) -> DWORD;
}
extern "C" {
    pub fn Ffb_h_EffNew(Packet: *const FFB_DATA, Effect: *mut FFBEType) -> DWORD;
}
extern "C" {
    pub fn Ffb_h_Eff_Constant(
        Packet: *const FFB_DATA,
        ConstantEffect: *mut FFB_EFF_CONSTANT,
    ) -> DWORD;
}
